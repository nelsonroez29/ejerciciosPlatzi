Hola a todos, espero que estén bien, para cumplir con el reto de los 30 registros de carros de forma automática, dividí el ejercicio en dos partes la 1. Que consta de la funcion constructura y la estructura de datos que prepare con 3 arrays distintos para establecer cuales serian los datos de la marca, modelo y annio (año) de cada uno de los 30 automoviles (carros-auto) y 2. la parte de la lógica del loop (Bucle) que utilice, realice varias pruebas, para comprobar si era posible usar las 3 estructuras del loop, es por eso que en esta parte muestro las versiones distintas de loop que emplee. Es de aclarar que todo lo que emplee para realizar este reto fueron criterios que se explicaron en este curso, hasta donde se encuentra este video. A continuación explico el ejercicio:

**Primera Parte**

Esta consiste primeramente en establecer la función constructora para crear la plantilla (template) del objeto, en nuestra caso para los 30 automóviles,


```
//Funcion constructora

function Auto(marca, modelo, annio){
    this.marca = marca;
    this.modelo = modelo;
    this.annio = annio;
    this.description = function(){
        console.log(`El Auto es un ${this.marca} ${this.modelo} del ${this.annio}`)
    }

}
```
Como se muestra, utilicé las 3 caracteristicas que Diego utilizo en sus ejemplos, y tambien quise colocar una propiedad (método) que mostrara un mensaje personalizado para cada automovil, como lo es ´description´. 

 Ahora bien, por otro lado, también tuve que preparar 3 arrays que van almacenan los datos de la marca, modelo y annio respectivamente de cada uno de los 30 automoviles, estos los seleccione uno a uno por igual.


```
//Lista de marcas de Carros.

var marcas = [
    "Audi",
    "BMW",
    "Chevrolet",
    "Ferrari",
    "Ford",
    "Nissan",
    "Suzuki",
    "Tesla",
    "Toyota",
    "Volkswagen",
    "Ferrari",
    "Ford",
    "Nissan",
    "Suzuki",
    "Tesla",
    "Toyota",
    "Volkswagen",
    "Audi",
    "BMW",
    "Chevrolet",
    "Ferrari",
    "Ford",
    "Nissan",
    "Suzuki",
    "Tesla",
    "Toyota",
    "Volkswagen",
    "Audi",
    "BMW",
    "Chevrolet",
];

//Lista de los modelos de estas marcas de Carros.

var modelos = [
    "A6 allroad quattro",
    "Serie 2 Gran Tourer",
    "Camaro",
    "California",
    "Mustang",
    "Murano",
    "Grand Vitara",
    "Model X",
    "Corolla",
    "Fox",
    "GTC4",
    "C-Max",
    "X-TRAIL",
    "Swift",
    "Model S",
    "Avensis",
    "Phaeton",
    "A4",
    "Serie 3",
    "Cruze",
    "488",
    "Fiesta",
    "QASHQAI",
    "SX4 S-Cross",
    "Model Y",
    "Land Cruiser",
    "Golf",
    "SQ7",
    "X1",
    "Aveo"
];

//Lista de los años de cada modelo anterior.

var annios = [
    "2021",
    "2022",
    "2010",
    "2015",
    "2020",
    "2007",
    "2012",
    "2018",
    "2020",
    "2014",
    "2017",
    "2015",
    "2016",
    "2014",
    "2021",
    "2017",
    "2016",
    "2015",
    "2016",
    "2015",
    "2016",
    "2016",
    "2014",
    "2013",
    "2017",
    "2018",
    "2016",
    "2020",
    "2022",
    "2015",

    
];

```

Utilice arrays porque me permite almacenar una gran cantidad de datos, y estos los puedo llamar mas tarde cuando los necesite.

Antes de procesar esta información para crear el registro de los 30 automoviles, pensé que para ello era importante guardar cada uno de estos registros (u objetos) en una variable pero de forma automática, es por eso que lo mas indicado era declarar un array que guardaría estos registros (u objetos) al momento de cada ciclo del loop (bucle), de allí fue donde surgió la idea de declarar el siguiente array antes de iniciar la parte del loop (bucle).



```
// Registro de Autos creados

listAutos = [];

```

Segunda Parte

Aquí es donde interviene la logica para el registro automatico de los automoviles, cada versión del bucle tiene el mismo fin, salvo que su sintaxis es distinta una de la otra.



```
//-------------------------------------------
// Versiones de Bucles
//-------------------------------------------


// Version 01 con for 01

for(var i = 0; i< marcas.length; i++){
    var newCar = new Auto(marcas[i], modelos[i],annios[i]);
    listAutos.push(newCar);
}

```

En este inicializamos una variable  **i** en 0, para recorrer desde el index 0 hasta el 29 de los arrays, dentro del bucle for, hay dos sentencias:

1. Que se encargara de crear el nuevo objeto basándose en la planilla (template) de la función constructor, y como parámetros de la función, se pasan los valores de los arrays con index igual a **i** esto permite que al iniciar el bucle, **i** sea igual a 0 y por cada ciclo se aumentara +1, hasta alcanzar 29 que es el ultimo índice de los arrays.

2. al obtener el objeto, este será guardado dentro del array listAutos, utilizando el método push()

En resumen, el for hará 30 ciclos, y por cada ciclo creará un nuevo objeto, que en nuestro caso es un automovil, e inmediatamente se guardará dentro de un array.



```
// Version 02 con for 01 Comprimido

for(var i = 0; i < marcas.length ; i++){
    listAutos.push(new Auto(marcas[i], modelos[i],annios[i]));
}

```

En esta versión solo se simplifico la expresion de la accion de crear y guardar el objeto en el array



```
// Version 03 con for...of ...

for(marca of marcas){
    var modelo = modelos.shift();;
    var annio = annios.shift()
    listAutos.push(new Auto(marca, modelo, annio));
}

```

En esta Version, se debe considerar que para ejecutar el for... of, se realiza partiendo de un grupo especifico de datos en una lista o en este caso de un array (**marcas**), y cada valor que se obtiene al leer el array se guarda en una variable con una expresión singular a esta (**marca**), el detalle es que dentro del for solo se usara los datos que guarda la variable singular, es por ello que para llamar a las variable de los otros arrays para completar la creacion del objeto es necesario llamar los valores indexados en los otros arrays (**modelos y annios**), para ello tuve que recurrir al método **shift()**, por dos razones, 1. Porque obtiene los valores desde el index 0 en adelante, y 2. el for al momento de leer los arrays siempre lo hace desde el index 0.



```
// Versión 04 con While tomando valores del primero al ultimo

while(marcas.length > 0){
    var marca = marcas.shift();
    var modelo = modelos.shift();
    var annio = annios.shift();
    listAutos.push(new Auto(marca, modelo,annio));

}
```

Debido a la naturaleza del **while**, o su forma de ejecución, partí del principio que utilicé con el método shift() en la versión anterior pero ahora para cada uno de los arrays y así llevar sus valores indexados a los parámetros de la función que construye el objeto, ademas este comportamiento del bucle **while**, Diego lo explica en su video.



```
// Version 05 con While tomando valores del ultimo al primero

while(marcas.length > 0){
    var marca = marcas.pop();
    var modelo = modelos.pop();
    var annio = annios.pop();
    listAutos.push(new Auto(marca, modelo,annio));

}
```

Lo único diferente en esta ultima versión es que cambie el método **shift()**, por el **pop()**, esto me permitió condicionar al **while** que en vez de iniciar por el index 0, iniciar por el ultimo y se regresara hasta el 0, es decir de forma inversa.

También debo recalcar que el uso del método **shift()** y el **pop()**, hace que saquemos los elementos del array, y lo que hice fue prácticamente sacar los elementos de los arrays (**marcas, modelos y annios**) para luego guardarlos en el array **listAutos** de forma mas organizada, un símil seria tener 3 bolsas de canicas y sacar una canica de cada una de ellas para guardarlas en otra bolsa de canicas mas grande, repitiendo esto 30 veces.
